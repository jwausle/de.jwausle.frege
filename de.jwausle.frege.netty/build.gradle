plugins {
	id "application"
   	id "org.frege-lang" version "0.5"
	id "java"
	id "com.github.johnrengelman.shadow" version "1.2.2"
	id "maven"
}

group = "de.jwausle"; version = "3.23.422-ga05a487"

sourceCompatibility = 1.8
targetCompatibility = 1.8

dependencies {
    compile "org.frege-lang:frege:3.23.422-ga05a487"
    compile "io.vertx:vertx-core:3.2.0"
    compile "log4j:log4j:1.2.17"
    compile "org.slf4j:slf4j-api:1.7.13"
    compile files("lib/javax-ssl-1_1.jar")
    compile "de.jwausle:de.jwausle.frege.java.net:3.23.422-ga05a487"
    compile "de.jwausle:de.jwausle.frege.java.text:3.23.422-ga05a487"
    compile "de.jwausle:de.jwausle.frege.java.nio:3.23.422-ga05a487"
}

// fregeAll clean, re-generate $trgFile and install jar to .m2
task fregeAll (dependsOn: ['fregeGenAll' , 'compileFrege', 'install', 'copyBuildResult'])
gradle.projectsEvaluated {
	compileJava.enabled = false
    compileFrege.dependsOn(fregeGenAll)
}

task fregeGenAll (dependsOn: ['fregeGenPatch', 'fregeGen','fregeGenClean'])

def trgFolder     = 'src/main/frege/frege/io'
def trgFile       = trgFolder + '/Netty.fr'
def trgFileHeader = 'src/main/resources/frege.io.Netty.header'

task fregeGenClean (type:Exec) { 
    commandLine 'bash', '-e', '-c', """
       rm -f  $trgFile
       rm -rf src/gen/incubator/
       mkdir  src/gen/incubator
    """
}

task fregeGen(type: JavaExec, dependsOn: 'fregeGenClean') { 
    classpath = files("gradle/lib/frege-native-gen-1.4-SNAPSHOT.jar") + sourceSets.main.compileClasspath
    mainClassName = "frege.nativegen.Main"
    main = "frege.nativegen.Main"
    args "-t", "src/main/resources/types.properties"
    args "-d", "src/gen/incubator"
    args '-c', 'io.netty.channel.EventLoopGroup'
    args '-c', 'io.netty.channel.EventLoop'
    args '-c', 'io.netty.channel.Channel'
    args '-c', 'io.netty.channel.ChannelFuture'
    args '-c', 'io.netty.channel.ChannelPromise'
    //--
    args '-c', 'io.netty.channel.ChannelConfig'
    args '-c', 'io.netty.buffer.ByteBufAllocator'
    args '-c', 'io.netty.channel.ChannelMetadata'
    args '-c', 'io.netty.channel.ChannelProgressivePromise'
    args '-c', 'io.netty.channel.ChannelPipeline'
    args '-c', 'io.netty.channel.Channel$Unsafe'
    args '-c', 'io.netty.util.concurrent.GenericFutureListener'
    args '-c', 'io.netty.util.concurrent.Future'
    //--
    args '-c', 'io.netty.channel.MessageSizeEstimator'
    args '-c', 'io.netty.channel.ChannelOption'
    args '-c', 'io.netty.channel.RecvByteBufAllocator'
    args '-c', 'io.netty.util.concurrent.EventExecutorGroup'
    //--
    args '-c', 'io.netty.util.concurrent.EventExecutor'
    args '-c', 'io.netty.util.concurrent.ScheduledFuture'
    args '-c', 'io.netty.channel.ChannelHandler'
    //--
    args '-c', 'io.netty.util.concurrent.ProgressivePromise'
    args '-c', 'io.netty.util.concurrent.Promise'
    args '-c', 'io.netty.channel.ChannelHandlerContext'
    args '-c', 'io.netty.channel.ChannelOutboundBuffer'
    args '-c', 'io.netty.channel.MessageSizeEstimator$Handle'
    //--
    args '-c', 'io.netty.channel.RecvByteBufAllocator$Handle'
    args '-c', 'io.netty.channel.ChannelOutboundBuffer$MessageProcessor'
    args '-c', 'io.netty.buffer.ByteBuf'
    //--
	args '-c', 'io.netty.buffer.CompositeByteBuf'
	args '-c', 'io.netty.buffer.ByteBufProcessor'
	//--
	args '-c', 'io.netty.channel.socket.DatagramPacket'
}

task fregeGenPatch(type:Exec, dependsOn: 'fregeGen') {
    commandLine 'bash', '-e', '-c', """
       mkdir -p build
       cat src/gen/incubator/io/netty/util/Concurrent.fr\
           src/gen/incubator/io/netty/Channel.fr\
           src/gen/incubator/io/netty/channel/Socket.fr\
           src/gen/incubator/io/netty/Buffer.fr     >  build/Tmp.fr 
       sed -i .0 's/module .* where//g'                build/Tmp.fr
       sed -i .1 's/import .*//g'                      build/Tmp.fr
       sed -i .2 's/derive Cloneable .*//g'            build/Tmp.fr
       sed -i .3 's/derive Exceptional .*//g'          build/Tmp.fr
       sed -i .4 's/derive Serializable .*//g'         build/Tmp.fr
       sed -i .5 's/.*pure native set.*().*//g'        build/Tmp.fr
       sed -i .6 's/pure native .* -> r -> .* -> r//g' build/Tmp.fr
       # specials
       sed -i .7 's/\\(pure native .* :: .* -> \\)()/\\1 Void/g' build/Tmp.fr
       sed -i .8 's/\\(pure native validate :: ChannelOption t -> t ->  Void\\)/-- \\1/g' build/Tmp.fr
       sed -i .9 's/\\(data GenericFutureListener f = pure native io.netty.util.concurrent.GenericFutureListener\\) where/\\1 --where/g' build/Tmp.fr
       sed -i .10 's/\\(native operationComplete :: GenericFutureListener f -> f -> ST s () throws Exception\\)/-- \\1/g'  build/Tmp.fr 
       mkdir -p $trgFolder
       cat $trgFileHeader build/Tmp.fr              >  $trgFile   
    """
}

task copyBuildResult(type:Copy, dependsOn: 'jar') {
	from('build/libs') { include '*.jar'}
	into 'build-results'
}

repositories {
    mavenLocal()
    jcenter()
    mavenCentral()
	maven { url "https://plugins.gradle.org/m2/" }
	maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
}
