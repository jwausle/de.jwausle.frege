module de.jw.frege.sql.Sql where 

import frege.data.NonEmpty
import de.jw.frege.sql.DatabaseMetadata

-------------------------------------------------------------------------------
--   from Cal.Core.Prelude
-------------------------------------------------------------------------------
public compose :: (b -> c) -> (a -> b) -> (a -> c);
public compose !f g x = f (g x);

-------------------------------------------------------------------------------
--   from Cal.Collections.List
-------------------------------------------------------------------------------
private find :: (a -> Bool) -> [a] -> Maybe a
private find predicate !list =
    case list of
    []                  -> Nothing
    listHead : listTail -> if predicate listHead then Just listHead
                           else find predicate listTail;
                           
-- from Cal.Collections.List
private removeDuplicates :: Eq a => [a] -> [a]
private removeDuplicates   = rdHelper []
    where rdHelper seen [] = seen
          rdHelper seen (x:xs)
              | x `elem` seen = rdHelper seen xs
              | otherwise = rdHelper (seen ++ [x]) xs
              

-- from Cal.Collections.List
private equals = (==)
private isElem :: Eq a => a -> [a] -> Bool
private isElem list = compose any2 equals list 

public any2 :: (a -> Bool) -> [a] -> Bool;
public any2 predicate = compose orList (map predicate);

public orList :: [Bool] -> Bool;
public orList !list = 
    case list of
    [] -> False
    listHead : listTail -> listHead || orList listTail

public intersect :: (Eq a) => [a] -> [a] -> [a];
public intersect = intersectBy equals

public intersectBy :: (a -> b -> Bool) -> [a] -> [b] -> [a];
public intersectBy eq list1 list2 = filter (flip (isElemBy eq) list2) list1;

public isElemBy eq2 x !list = any (eq2 x) list

public getJoinTreeTables :: JoinNode -> [QueryTable]
public getJoinTreeTables rootJoinNode = removeDuplicates (getTablesHelper rootJoinNode) 
    where getTablesHelper node = 
            case node of
            JoinTable table                    -> [table];
            JoinSubtree leftNode rightNode _ _ -> (getTablesHelper leftNode) ++ (getTablesHelper rightNode);

public isSingletonList :: [a] -> Bool
public isSingletonList list = 
    case list of
    [] -> False;
    _ : listTail -> 
        case listTail of
        [] -> True;
        _ -> False;


-------------------------------------------------------------------------------
--   Q U E R Y - T A B L E
-------------------------------------------------------------------------------
data QueryTable = 
    BaseTable             {  tableRef     :: TableReference, 
      						 tableAlias   :: String } |
    SubQueryTable         {  subquery     :: Query, 
                             tableAlias   :: String } |
    OpaqueSubQueryTable   {  subqueryText :: String, 
                             tableAlias   :: String } 
derive Eq QueryTable
derive Show QueryTable

public newQueryTable :: String -> QueryTable
public newQueryTable !tableName = newQueryTableWithAlias tableName ""

public newQueryTableWithAlias :: String -> String -> QueryTable;
public newQueryTableWithAlias !tableName !tableAlias = BaseTable (newTableReference tableName) fixedAlias
    where
        fixedAlias :: String;
        fixedAlias = if (null tableAlias) then tableName else tableAlias;

public newSubQueryTable :: Query -> String -> QueryTable;
public newSubQueryTable subquery !tableAlias = 
    let
        fixedAlias :: String;
        fixedAlias = if (null tableAlias) then "Q" else tableAlias;
    in
        SubQueryTable (fixSubqueryOrdering subquery) fixedAlias

-------------------------------------------------------------------------------
--   Q U E R Y
-------------------------------------------------------------------------------
data Query = 
    Query {
        options          :: [QueryOption],                
        columns          :: [(Expr, String)],              
        restriction      :: (Maybe (TypedExpr Bool)),   
        orderings        :: [(Expr, Bool)],             
        joins            :: [JoinNode],                    
        groups           :: [Expr],                        
        groupRestriction :: (Maybe (TypedExpr Bool)) } | 
    Union {
        query1           :: Query,     
        query2           :: Query,
        unionAll         :: Bool }
derive Show Query
derive Eq Query

private fixSubqueryOrdering subquery = if (isTopNQuery subquery) then subquery else removeOrdering subquery
public removeOrdering :: Query -> Query;
public removeOrdering query = 
    case query of
    Query options columns restriction orderings joins groups groupRestriction -> 
        Query options columns restriction [] joins groups groupRestriction;

    Union query1 query2 unionAll ->      Union (removeOrdering query1) (removeOrdering query2) unionAll;

private isTopNQuery :: Query -> Bool
private isTopNQuery query =
    case query of
    Query {options} -> any isTopNOption options 
    Union {query1, query2} -> isTopNQuery query1 || isTopNQuery query2

public getQueryTables :: Bool -> Query -> [QueryTable];
public getQueryTables includeSubqueryTables query = 
    case query of
    Query {columns, restriction, orderings, joins, groups, groupRestriction} ->
        removeDuplicates (exprTables ++ joinTables)
            where
            columnExprs = map fst columns;
            restrictionExprs = 
                case restriction of
                Nothing               -> [];
                Just restrictionValue -> [toUntypedExpr restrictionValue];

            groupRestrictionExprs = 
                case groupRestriction of
                Nothing                    -> []
                Just groupRestrictionValue -> [toUntypedExpr groupRestrictionValue]

            orderingExprs = map fst orderings;
            allExprs = columnExprs ++ restrictionExprs ++ orderingExprs ++ groups ++ groupRestrictionExprs;

            exprTables = concatMap (getExpressionTables includeSubqueryTables) allExprs;

            tableAndSubTables queryTable = 
                case queryTable of
                BaseTable _ _           -> [queryTable]
                OpaqueSubQueryTable _ _ -> [queryTable]
                SubQueryTable subquery _-> 
                    if (includeSubqueryTables) then queryTable : getQueryTables True subquery else [queryTable]
            joinTablesOnly = concatMap getJoinTreeTables joins;
            joinTablesAndSubTables = concatMap tableAndSubTables joinTablesOnly;
            joinTables = if (includeSubqueryTables) then joinTablesAndSubTables else joinTablesOnly;
            
    Union {query1, query2} -> 
        removeDuplicates ((getQueryTables includeSubqueryTables query1) ++ (getQueryTables includeSubqueryTables query2));
-------------------------------------------------------------------------------
--   Q U E R Y - O P T I O N
-------------------------------------------------------------------------------
data QueryOption = 
    public Distinct   |
    public TopN { 
        n        :: Int, 
        percent  :: Bool, 
        withTies :: Bool
    }
derive Eq QueryOption
derive Show QueryOption

public isTopNOption :: QueryOption -> Bool;
public isTopNOption !option = case option of
                              TopN _ _ _ -> True
                              _          -> False
                              
-------------------------------------------------------------------------------
--   J O I N - T Y P E
-------------------------------------------------------------------------------
data JoinType = 
    public InnerJoin |
    public LeftOuterJoin | 
    public RightOuterJoin  |
    public FullOuterJoin
derive Eq JoinType
derive Show JoinType
derive Ord JoinType 

-------------------------------------------------------------------------------
--   J O I N - N O D E
-------------------------------------------------------------------------------
data JoinNode = 
    public JoinTable   { table       :: QueryTable } |
    public JoinSubtree { leftNode    :: JoinNode,  
                         rightNode   :: JoinNode, 
                         linkingExpr :: (TypedExpr Bool), 
                         joinType    :: JoinType   }  
derive Eq JoinNode

instance Show JoinNode where show = showJoinNode 

private showJoinNode :: JoinNode -> String
private showJoinNode !node = 
    case node of
    JoinTable joinTable -> show joinTable;
    JoinSubtree leftNode  rightNode _ _  -> "{" ++ (showJoinNode leftNode) ++ " -> " ++ (showJoinNode rightNode) ++ "}";
    

-------------------------------------------------------------------------------
--   J O I N - I N F O 
-------------------------------------------------------------------------------
data JoinInfo = 
    public JoinInfo { 
        leftTable      :: QueryTable, 
        rightTable     :: QueryTable,
        fieldJoinExprs :: [TypedExpr Bool],
        joinType       :: JoinType
    }
newJoinInfo :: Eq a => TypedExpr a -> TypedExpr a -> JoinType -> JoinInfo;
public newJoinInfo !leftField !rightField !joinType = 
    JoinInfo leftTable rightTable [fieldJoinExpr] joinType
    where
        tableFromQueryField fieldExpr = 
            case (toUntypedExpr fieldExpr) of
            QueryField _ queryTable -> queryTable;
            _ -> error ("The join fields must be QueryFields");

        leftTable :: QueryTable;
        leftTable  = tableFromQueryField leftField;

        rightTable :: QueryTable;
        rightTable = tableFromQueryField rightField;

        fieldJoinExpr :: TypedExpr Bool;
        fieldJoinExpr = eqExpr leftField rightField;

public newJoinInfo2 :: QueryTable -> QueryTable -> TypedExpr Bool -> JoinType -> JoinInfo;
public newJoinInfo2 !leftTable !rightTable linkingExpr !joinType = 
    JoinInfo leftTable rightTable [linkingExpr] joinType;

-------------------------------------------------------------------------------
--   J O I N - S E T
-------------------------------------------------------------------------------
data JoinSet = public JoinSet  { name  :: String,  joins :: JoinNode }
derive Show JoinSet
 
public makeJoinSet :: String -> [JoinInfo] -> JoinSet;
public makeJoinSet !name joins = 
    makeJoinSet2 name (buildJoinTree joins);

public makeJoinSet2 :: String -> JoinNode -> JoinSet;
public makeJoinSet2 !name joinTree = 
    JoinSet name joinTree;

public buildJoinTree :: [JoinInfo] -> JoinNode
public buildJoinTree joinInfo = 
    let
        joinTrees = fold applyJoinInfo [] joinInfo;
    in
        if (null joinInfo) then
            error "No join info items were specified"
        else if (length joinTrees == 1) then
            head joinTrees
        else
            error "The join info items could not be combined into a single join tree"

private applyJoinInfo :: [JoinNode] -> JoinInfo -> [JoinNode];
private applyJoinInfo !oldNodes !joinInfo = 
    case joinInfo of
    JoinInfo {leftTable, rightTable, fieldJoinExprs, joinType} ->
        let
            -- Returns whether the join node subtree contains a node for the
            -- specified table.
            joinSubtreeIncludesTable :: QueryTable -> JoinNode -> Bool;
            joinSubtreeIncludesTable table node = 
                case node of
                JoinTable joinTable                 -> table == joinTable
                JoinSubtree leftNode rightNode _ _  ->
                    (joinSubtreeIncludesTable table leftNode) || (joinSubtreeIncludesTable table rightNode)
                

            -- Determine which join trees contain the left and right tables.
            -- The first item, if any, in each list will be the join tree
            -- containing the appropriate table.
            leftResults  = snd (break (joinSubtreeIncludesTable leftTable) oldNodes);
            rightResults = snd (break (joinSubtreeIncludesTable rightTable) oldNodes);

            leftTableTree  = 
                case leftResults of
                [] -> JoinTable leftTable
                leftResultsHead : _ -> leftResultsHead              

            rightTableTree = 
                case rightResults of
                [] -> JoinTable rightTable
                rightResultsHead : _ -> rightResultsHead
                

            -- Check whether both tables are already used in the same join node
            -- tree.
            tablesFromSameTree = (length leftResults == length rightResults) && not (null leftResults);

            -- Combine the individual field join expressions into a single
            -- linking expressions.
            linkingExpr :: TypedExpr Bool;
            linkingExpr = case fieldJoinExprs of
                          [] -> error "No field join expressions were specified for a join."
                          _  -> fold andExpr trueConstant fieldJoinExprs               

            -- Construct a new join node tree which includes the join between
            -- the left and right tables.
            newNode = if (tablesFromSameTree) then 
                          addLinkExprInSubtree leftTableTree
                      else 
                          JoinSubtree leftTableTree rightTableTree linkingExpr joinType;

            -- If the left and right tables already belong to the same join
            -- tree, then the linking criteria
            -- will need to be added to an existing join node in this tree.
            -- This will be added to the first node (closest to the table nodes)
            -- that has both tables in its subtree.
            addLinkExprInSubtree :: JoinNode -> JoinNode;
            addLinkExprInSubtree node = 
                case node of
                JoinTable {} -> node;
                JoinSubtree {leftNode, rightNode, linkingExpr=oldLinkingExpr, joinType} -> 
                    let
                        isCommonNodeForTables :: Bool;
                        isCommonNodeForTables = 
                            case node of
                            JoinTable {} -> False;
                            JoinSubtree {leftNode, rightNode} -> 
                                (joinSubtreeIncludesTable leftTable leftNode) && (joinSubtreeIncludesTable rightTable rightNode)
                                || (joinSubtreeIncludesTable rightTable leftNode) && (joinSubtreeIncludesTable leftTable rightNode)                            

                        combinedLinkingExpr = andExpr oldLinkingExpr linkingExpr;
                    in
                        if (isCommonNodeForTables) then JoinSubtree leftNode rightNode combinedLinkingExpr joinType
                        else JoinSubtree (addLinkExprInSubtree leftNode) (addLinkExprInSubtree rightNode) linkingExpr joinType
                

            -- Remove the appropriate node(s) from the old list of join trees.
            nodesToPreserve = filter (\node -> not (joinSubtreeIncludesTable leftTable node || joinSubtreeIncludesTable rightTable node)) oldNodes;

            newNodes = cleanupJoinNodes (newNode : nodesToPreserve);
        in
            newNodes

private cleanupJoinNodes :: [JoinNode] -> [JoinNode]
private cleanupJoinNodes joinNodes = 
    let
        allJoinTables :: [QueryTable]
        allJoinTables = concatMap getJoinTreeTables joinNodes

        tablesWithSpecifiedAlias :: [QueryTable]
        tablesWithSpecifiedAlias = 
            filter (\t -> 
                       case t of
                       BaseTable {tableRef, tableAlias} -> getTableNameFromReference tableRef != tableAlias
                       _ -> False
                   )
                   allJoinTables
                   
        fixTableName table = fromMaybe table (find (== table) tablesWithSpecifiedAlias);

        fixJoinTableNames join = 
            case join of
            JoinTable table                                     ->  JoinTable (fixTableName table)
            JoinSubtree leftNode rightNode linkingExpr joinType -> 
                JoinSubtree (fixJoinTableNames leftNode) (fixJoinTableNames rightNode) linkingExpr joinType

        joinNodesWithFixedTableNames :: [JoinNode]
        joinNodesWithFixedTableNames = map fixJoinTableNames joinNodes

        -- Removed any unjoined tables which are included in a join.
        cleanupUnjoinedTables :: [JoinNode] -> [JoinNode]
        cleanupUnjoinedTables joinNodes = 
            let
                isUnlinkedTable node = 
                    case node of
                    JoinTable {} -> True
                    _ -> False

                getUnlinkedTable node = case node of 
                                        JoinTable table -> table
                                        JoinSubtree{} -> error "No JoinSubtree supported here."

                isTableUsedInJoin table = 
                    let
                        joinSubtreeNodes = filter (compose not isUnlinkedTable) joinNodes
                        tablesUsedInJoins = removeDuplicates (concatMap getJoinTreeTables joinSubtreeNodes)
                    in
                        isElem table tablesUsedInJoins
            in
                filter (\n -> not (isUnlinkedTable n && isTableUsedInJoin (getUnlinkedTable n))) joinNodes

        -- Combine join trees with tables in common, where possible.
        consolidateJoinNodes :: [JoinNode] -> [JoinNode]
        consolidateJoinNodes nodes = 
            case nodes of
            []     -> []
            n : ns -> 
                let
                    nTables  = getJoinTreeTables n
                    nsTables = removeDuplicates (concatMap getJoinTreeTables ns)

                    tablesOverlap = not (null (intersect nTables nsTables))

                    -- Attempt to break the first node into a list of JoinInfo items.
                    nodeJoinInfos :: [JoinInfo]
                    nodeJoinInfos = joinNodeToJoinInfo n
                in
                    -- If the first node has tables in common with one or more
                    -- of the other nodes
                    -- then attempt to break it into JoinInfo items and apply
                    -- them to the remaining nodes.
                    if (tablesOverlap && not (null nodeJoinInfos)) then fold applyJoinInfo ns nodeJoinInfos
                    else n : consolidateJoinNodes ns
    in
        consolidateJoinNodes (cleanupUnjoinedTables joinNodesWithFixedTableNames);

private joinNodeToJoinInfo :: JoinNode -> [JoinInfo]
private joinNodeToJoinInfo joinNode = 
    case joinNode of
    JoinSubtree {leftNode, rightNode, linkingExpr, joinType} -> leftJoinInfos ++ rightJoinInfos ++ joinInfos
        where
            leftTables  = getJoinTreeTables leftNode;
            rightTables = getJoinTreeTables rightNode;

            linkExprTables = getExpressionTables False (toUntypedExpr linkingExpr)

            leftTable  = if (isSingletonList leftTables) then listToMaybe leftTables 
                         else find (\t -> isElem t linkExprTables) leftTables;
            rightTable = if (isSingletonList rightTables) then listToMaybe rightTables 
                         else find (\t -> isElem t linkExprTables) rightTables;

            leftJoinInfos  = joinNodeToJoinInfo leftNode
            rightJoinInfos = joinNodeToJoinInfo leftNode

            joinInfos = 
                case leftTable of
                Nothing -> []
                Just leftTableValue -> case rightTable of
                                       Nothing              -> []
                                       Just rightTableValue ->  [newJoinInfo2 leftTableValue rightTableValue linkingExpr joinType]
    _ -> [];
-------------------------------------------------------------------------------
--   T Y P E D - E X P R
-------------------------------------------------------------------------------
data TypedExpr a = TypedExpr {  untypedExpr:: Expr }
derive Eq (TypedExpr a) 
derive Show (TypedExpr a)

public booleanConstant :: Bool -> TypedExpr Bool;
public booleanConstant !boolValue = if boolValue then trueConstant else falseConstant;

public trueConstant :: TypedExpr Bool;
public trueConstant =  TypedExpr (ConstExpr (BooleanValue true));

public falseConstant :: TypedExpr Bool
public falseConstant =  TypedExpr (ConstExpr (BooleanValue False));

public andExpr :: TypedExpr Bool -> TypedExpr Bool -> TypedExpr Bool;
public andExpr b1 b2 = 
    if (b1 == trueConstant) then b2
    else if (b2 == trueConstant) then b1
    else if (b1 == falseConstant || b2 == falseConstant) then falseConstant
    else functionExpr2 OpAnd b1 b2;
-------------------------------------------------------------------------------
--   E X P R
-------------------------------------------------------------------------------
data Expr = 
    public QueryField   {   fieldName     :: String, 
                            queryTable    :: QueryTable } |
    public ConstExpr    {   constantValue :: ConstValue } |
    public ParameterExpr{   parameter     :: Parameter  } |
    public ListExpr     {   listValues    :: [Expr]     } |
    public FunctionExpr {   func          :: DbFunction, 
                             arguments    :: [Expr]    } |
    public SubQueryExpr {   subquery      :: Query      }
derive Eq Expr
derive Show Expr
  
public toUntypedExpr :: TypedExpr a -> Expr;
public toUntypedExpr !typedExpr = case typedExpr of TypedExpr untypedExpr  -> untypedExpr;

public eqExpr :: Eq a => TypedExpr a -> TypedExpr a -> TypedExpr Bool;
public eqExpr = functionExpr2 OpEq;

public getExpressionTables :: Bool -> Expr -> [QueryTable];
public getExpressionTables includeSubqueryTables expr = removeDuplicates (expressionTablesHelper expr)
    where
        expressionTablesHelper expr = 
            case expr of
            QueryField {fieldName, queryTable} -> 
                case queryTable of
                BaseTable  _ _            -> [queryTable]
                OpaqueSubQueryTable  _ _  -> [queryTable]
                SubQueryTable subquery _  -> 
                    if includeSubqueryTables then queryTable : getQueryTables True subquery
                    else [queryTable];
    
            ConstExpr {}             -> [];
            ListExpr  {listValues}   -> concatMap expressionTablesHelper listValues;
            FunctionExpr {arguments} -> concatMap expressionTablesHelper arguments;
            SubQueryExpr {subquery}  -> if (includeSubqueryTables) then getQueryTables True subquery else [] 
            ParameterExpr{parameter} -> error "ParameterExpr not supported here."
        
-------------------------------------------------------------------------------
--   C O N S T - V A L U E
-------------------------------------------------------------------------------
data ConstValue =     
    NullValue |
    StringValue  { strValue  :: String  } |
    NumberValue  { numValue  :: Double  } | 
    BooleanValue { boolValue :: Bool } | 
    TimeValue    { timeValue :: Time    }
derive Eq ConstValue
derive Show ConstValue

data Time = Time
derive Eq Time
derive Show Time
-------------------------------------------------------------------------------
--   P A R A M E T E R
-------------------------------------------------------------------------------
data Parameter = Parameter
derive Eq Parameter
derive Show Parameter
-------------------------------------------------------------------------------
--   D B - F U N C T I O N
-------------------------------------------------------------------------------
data DbFunction = 
    -- Unary operators.
    public OpNot | public OpBitNot | public OpNegate
    | public OpIsNull | public OpIsNotNull
    | public OpExists
    
    -- Binary operators
    | public OpEq | public OpLt | public OpLtEq | public OpGt | public OpGtEq | public OpNotEq 
    | public OpAnd | public OpOr
    | public OpLike | public OpIn
    | public OpCat
    | public OpPlus | public OpMinus | public OpMul | public OpDiv | public OpMod
    | public OpBitAnd | public OpBitOr | public OpBitXor
    
    -- Other operators
    | public OpBetween | public OpCase_Simple | public OpCase_Searched

    -- Conversion functions
    | public ConvertToStringFunction 
    | public ConvertToIntFunction 
    | public ConvertToDoubleFunction
    | public ConvertToTimeFunction

    -- Numeric functions
    | public AbsFunction | public AcosFunction | public AsinFucntion | public AtanFunction | public Atan2Function
    | public CeilingFunction | public CosFunction | public CotFunction | public DegreesFunction | public ExpFunction
    | public FloorFunction | public LogFunction | public Log10Function | public ModFunction | public PiFunction
    | public PowerFunction | public RadiansFunction | public RandFunction | public RoundFunction | public SignFunction
    | public SinFunction | public SqrtFunction | public TanFunction | public TruncateFunction

    -- String functions
    | public AsciiFunction | public CharFunction | public DifferenceFunction
    | public InsertFunction| public LcaseFunction | public LeftFunction | public LengthFunction | public LocateFunction
    | public LtrimFunction | public RepeatFunction | public ReplaceFunction | public RightFunction | public RtrimFunction
    | public SoundexFunction | public SpaceFunction | public SubstringFunction | public UcaseFunction

    -- System functions
    | public DatabaseFunction | public UserFunction

    -- Null-handling functions
    | public IfNullFunction | public NullIfFunction 

    -- DateTime functions
    | public DayNameFunction | public DayOfWeekFunction | public DayOfMonthFunction | public DayOfYearFunction | public HourFunction | public MinuteFunction
    | public MonthFunction | public MonthNameFunction | public NowFunction | public QuarterFunction | public SecondFunction
    | public WeekFunction | public YearFunction
    | public DateTimeAddFunction  { timeInterval :: TimeInterval }
    | public DateTimeDiffFunction { timeInterval :: TimeInterval }

    -- Aggregation functions.
    | public AggrCount | public AggrSum | public AggrAvg | public AggrMin | public AggrMax
    | public AggrDistinctCount | public AggrDistinctSum | public AggrDistinctAvg
    | public AggrCountAll
    | public AggrStdDev | public AggrStdDevP | public AggrVar | public AggrVarP
    | public AggrOther  { other :: String }

    -- A function with the specified name.
    | public FunctionOther { funcName :: String }
derive Eq DbFunction
derive Show DbFunction

untypedFunctionExpr :: DbFunction -> [Expr] -> Expr;
public untypedFunctionExpr func arguments = FunctionExpr func arguments;

-- Helper functions to construct typed function expressions.
-- These should not be exposed.
private functionExpr0 :: DbFunction -> TypedExpr a;
private functionExpr0 func = TypedExpr (untypedFunctionExpr func []);

private functionExpr1 :: DbFunction -> TypedExpr a -> TypedExpr b;
private functionExpr1 func arg1 = TypedExpr (untypedFunctionExpr func [toUntypedExpr arg1]);

private functionExpr2 :: DbFunction -> TypedExpr a -> TypedExpr b -> TypedExpr c;
private functionExpr2 func arg1 arg2 = TypedExpr (untypedFunctionExpr func [toUntypedExpr arg1, toUntypedExpr arg2]);

private functionExpr3 :: DbFunction -> TypedExpr a -> TypedExpr b -> TypedExpr c -> TypedExpr d;
private functionExpr3 func arg1 arg2 arg3 = TypedExpr (untypedFunctionExpr func [toUntypedExpr arg1, toUntypedExpr arg2, toUntypedExpr arg3]);

private functionExpr4 :: DbFunction -> TypedExpr a -> TypedExpr b -> TypedExpr c -> TypedExpr d -> TypedExpr e;
private functionExpr4 func arg1 arg2 arg3 arg4 = TypedExpr (untypedFunctionExpr func [toUntypedExpr arg1, toUntypedExpr arg2, toUntypedExpr arg3, toUntypedExpr arg4]);

-------------------------------------------------------------------------------
--   T I M E - I N T E R V A L
-------------------------------------------------------------------------------
data TimeInterval = 
    public YearInterval 
    | public QuarterInterval
    | public MonthInterval
    | public DayInterval
    | public HourInterval
    | public MinuteInterval
    | public SecondInterval

derive Eq TimeInterval
derive Show TimeInterval
