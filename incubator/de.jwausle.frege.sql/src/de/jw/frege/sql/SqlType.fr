module de.jw.frege.sql.SqlType where

import de.jw.frege.util.ValueType

public data SqlType =
  public SqlType_TinyInt | 
  public SqlType_SmallInt |
  public SqlType_Integer |
  public SqlType_BigInt |
  public SqlType_Decimal { precision :: Int, scale     :: Int } | 
  public SqlType_Numeric { precision :: Int, scale     :: Int } | 
  public SqlType_Real |
  public SqlType_Float |
  public SqlType_Double | 
  public SqlType_Bit  |
  public SqlType_Boolean |
  public SqlType_Char { lenght :: Int } | 
  public SqlType_VarChar { lenght :: Int } |
  public SqlType_LongVarChar |
  public SqlType_Clob |
  public SqlType_Binary  { lenght :: Int } |
  public SqlType_VarBinary { lenght :: Int } |
  public SqlType_LongVarBinary |
  public SqlType_Blob | 
  public SqlType_Date | 
  public SqlType_Time | 
  public SqlType_TimeStamp | 
  public SqlType_Array | 
  public SqlType_Datalink | 
  public SqlType_Distinct | 
  public SqlType_JavaObject | 
  public SqlType_Ref | 
  public SqlType_Struct | 
  public SqlType_Null | 
  public SqlType_Other 
derive Eq SqlType

fromJdbcMetadata :: Int -> Int -> Int -> SqlType;
public fromJdbcMetadata !jdbcTypeCode columnSize decimalDigits = 
	if jdbcTypeCode < 0 then  
      case (jdbcTypeCode * -1) of 
      7 -> SqlType.SqlType_Bit
      6 -> SqlType.SqlType_TinyInt
      5 -> SqlType.SqlType_BigInt
      4 -> SqlType.SqlType_LongVarBinary
      3 -> SqlType.SqlType_VarBinary columnSize
      2 -> SqlType.SqlType_Binary columnSize 
      1 -> SqlType.SqlType_LongVarChar
      _ -> error "Unknown jdbc -type." 
    else 
      case jdbcTypeCode of
      0 -> SqlType.SqlType_Null
      1 -> SqlType.SqlType_Char columnSize
      2 -> SqlType.SqlType_Numeric columnSize decimalDigits
      3 -> SqlType.SqlType_Decimal columnSize decimalDigits
      4 -> SqlType.SqlType_Integer
      5 -> SqlType.SqlType_SmallInt
      6 -> SqlType.SqlType_Float
      7 -> SqlType.SqlType_Real
      8 -> SqlType.SqlType_Double
      12 -> SqlType.SqlType_VarChar columnSize
      16 -> SqlType.SqlType_Boolean 
      70 -> SqlType.SqlType_Datalink
      91 -> SqlType.SqlType_Date
      92 -> SqlType.SqlType_Time
      93 -> SqlType.SqlType_TimeStamp
      1111 -> SqlType.SqlType_Other
      2000 -> SqlType.SqlType_JavaObject
      2001 -> SqlType.SqlType_Distinct
      2002 -> SqlType.SqlType_Struct
      2003 -> SqlType.SqlType_Array
      2004 -> SqlType.SqlType_Blob
      2005 -> SqlType.SqlType_Clob
      2006 -> SqlType.SqlType_Ref
      _ -> error "Unknown jdbc type."

isLongType :: SqlType -> Bool
public isLongType !sqlType = 
    case sqlType of 
    SqlType_LongVarChar -> true 
    SqlType_LongVarBinary -> true  
    SqlType_Blob -> true 
    SqlType_Clob -> true
    _ -> false

toValueType :: SqlType -> ValueType;
public toValueType !sqlType = 
    case sqlType of 
    SqlType_TinyInt -> ValueType.IntType
    SqlType_SmallInt -> ValueType.IntType
    SqlType_Integer -> ValueType.IntType
    --
    SqlType_BigInt -> ValueType.DoubleType
    SqlType_Decimal _ _ -> ValueType.DoubleType
    SqlType_Numeric _ _ -> ValueType.DoubleType
    SqlType_Real -> ValueType.DoubleType
    SqlType_Float -> ValueType.DoubleType
    SqlType_Double -> ValueType.DoubleType
    --
    SqlType_Bit -> ValueType.BooleanType
    SqlType_Boolean -> ValueType.BooleanType
    --
    SqlType_Binary _ -> ValueType.BinaryType
    SqlType_VarBinary _ -> ValueType.BinaryType
    SqlType_LongVarBinary  -> ValueType.BinaryType
    SqlType_Blob -> ValueType.BinaryType
    --
    SqlType_Date -> ValueType.TimeType
    SqlType_Time -> ValueType.TimeType
    SqlType_TimeStamp -> ValueType.TimeType
    --
    SqlType_Array -> ValueType.NullType
    SqlType_Datalink -> ValueType.NullType
    SqlType_Distinct -> ValueType.NullType
    SqlType_JavaObject -> ValueType.NullType
    SqlType_Ref -> ValueType.NullType
    SqlType_Struct -> ValueType.NullType
    SqlType_Null -> ValueType.NullType
    SqlType_Other -> ValueType.NullType
    --
    _ -> error "Unknow sqlType"

fromValueType :: ValueType -> Maybe Int -> SqlType
public fromValueType !valueType maybeLength = 
    case valueType of
    ValueType.NullType    -> SqlType_Null
    ValueType.StringType  -> SqlType_VarChar $ fromMaybe 255 maybeLength
    ValueType.IntType     -> SqlType_Integer
    ValueType.DoubleType  -> SqlType_Double
    ValueType.BooleanType -> SqlType_Boolean
    ValueType.TimeType    -> SqlType_TimeStamp
    ValueType.BinaryType  -> SqlType_LongVarBinary
    _ -> error "Unknown valueType."
    
instance Show SqlType where
    show a = sqlTypeToString a

sqlTypeToString :: SqlType -> String;
sqlTypeToString !sqlType = 
    case sqlType of
    SqlType_TinyInt            -> "TinyInt"
    SqlType_SmallInt           -> "SmallInt"
    SqlType_Integer            -> "Integer"
    SqlType_BigInt             -> "BigInt"
    SqlType_Decimal precision scale -> "Decimal(" ++ intToString precision ++ ", " ++ intToString scale ++ ")"
    SqlType_Numeric precision scale -> "Numeric(" ++ intToString precision ++ ", " ++ intToString scale ++ ")"
    SqlType_Real               -> "Real"
    SqlType_Float              -> "Float"
    SqlType_Double             -> "Double"
    SqlType_Bit                -> "Bit"
    SqlType_Boolean            -> "Boolean"
    SqlType_Char length        -> "Char(" ++ intToString length ++ ")"
    SqlType_VarChar length     -> "VarChar(" ++ intToString length ++ ")"
    SqlType_LongVarChar        -> "LongVarChar"
    SqlType_Clob               -> "Clob"
    SqlType_Binary length      -> "Binary(" ++ intToString length ++ ")"
    SqlType_VarBinary length   -> "VarBinary(" ++ intToString length ++ ")"
    SqlType_LongVarBinary      -> "LongVarBinary"
    SqlType_Blob               -> "Blob"
    SqlType_Date               -> "Date"
    SqlType_Time               -> "Time"
    SqlType_TimeStamp          -> "TimeStamp"
    SqlType_Array              -> "Array"
    SqlType_Datalink           -> "Datalink"
    SqlType_Distinct           -> "Distinct"
    SqlType_JavaObject         -> "JavaObject"
    SqlType_Ref                -> "Ref"
    SqlType_Struct             -> "Struct"
    SqlType_Null               -> "Null"
    SqlType_Other              -> "Other"

 
private intToString int = show int

sqlTypeFromString :: String -> SqlType;
sqlTypeFromString !sqlTypeString =
   case sqlTypeString of 
   "TinyInt" -> SqlType_TinyInt
   "SmallInt" -> SqlType_SmallInt
   "Integer" -> SqlType_Integer
   "BigInt" -> SqlType_BigInt
   "Decimal" -> SqlType_Decimal 0 0 --(List.subscript typeArgs 0) (List.subscript typeArgs 1)
   "Numeric" -> SqlType_Numeric 0 0 --(List.subscript typeArgs 0) (List.subscript typeArgs 1)
   "Real" -> SqlType_Real
   "Float" -> SqlType_Float
   "Double" -> SqlType_Double
   "Bit" -> SqlType_Bit
   "Boolean" -> SqlType_Boolean
   "Char" -> SqlType_Char 0 -- (List.head typeArgs)
   "VarChar" -> SqlType_VarChar 0 -- (List.head typeArgs)
   "LongVarChar" -> SqlType_LongVarChar
   "Clob" -> SqlType_Clob
   "Binary" -> SqlType_Binary 0 -- (List.head typeArgs)
   "VarBinary" -> SqlType_VarBinary 0 --(List.head typeArgs)
   "LongVarBinary" -> SqlType_LongVarBinary
   "Blob" -> SqlType_Blob
   "Date" -> SqlType_Date
   "Time" -> SqlType_Time
   "TimeStamp" -> SqlType_TimeStamp
   "Array" -> SqlType_Array
   "Datalink" -> SqlType_Datalink
   "Distinct" -> SqlType_Distinct
   "JavaObject" -> SqlType_JavaObject
   "Ref" -> SqlType_Ref
   "Struct" -> SqlType_Struct
   "Null" -> SqlType_Null
   "Other" -> SqlType_Other
   _ -> error ("Unexpected SQL type '" ++ sqlTypeString ++ "'.")
   
   
