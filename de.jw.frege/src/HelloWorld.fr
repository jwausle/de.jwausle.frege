module HelloWorld where

data Ticker = GOOG | MSFT | APPL | CANO | NOOB
derive Eq Ticker

data Bank       = Bank      { clients       :: [Client]     }
data Client     = Client    { portfolios    :: [Portfolio]  }
data Portfolio  = Portfolio { positions     :: [Position]   }
data Position   = Position  { soMany :: Int, ticker :: Ticker }

bank = Bank { clients = replicate 1000
    Client { portfolios = replicate 3
        Portfolio { positions = [
            Position { soMany = 1, ticker = APPL },
            Position { soMany = 2, ticker = MSFT },
            Position { soMany = 8, ticker = CANO }
        ]}
    }
}

data LinkedList a = native java.util.LinkedList where
	native add :: Mutable s (LinkedList a) -> a -> ST s Bool
	native get :: Mutable s (LinkedList a) -> Int -> ST s (Maybe a) throws
		IndexOutOfBoundsException
	native new :: () -> STMutable s (LinkedList a)

	fromFregeList :: [a] -> STMutable s (LinkedList a)
	fromFregeList xs = LinkedList.new () >>= loop xs where
		loop (x:xs) jlist = LinkedList.add jlist x >> loop xs jlist
		loop [] jlist = return jlist

plusTop :: Mutable s (LinkedList Int) -> ST s (Maybe Int)
plusTop xs = do
	a <- xs.get 0
	b <- xs.get 1
	return ((+) <$> a <*> b)

data IndexOutOfBoundsException = native java.lang.IndexOutOfBoundsException
derive Exceptional IndexOutOfBoundsException

data Exception = native java.lang.Exception
derive Exceptional Exception

data NullPointerException = native java.lang.NullPointerException
derive Exceptional NullPointerException

pure native showThrowable toString :: Throwable -> String

main _ = do
	javaList <- LinkedList.fromFregeList [1, 2, 3]
	try (\xs -> plusTop xs >>= (println . maybe "Got a null pointer" show)) javaList
		`catch` (\(npe :: NullPointerException) -> println $ showThrowable npe)
		`catch` (\(exception :: Exception) -> println $ showThrowable exception)