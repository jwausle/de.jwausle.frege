module de.jw.frege.sql.DatabaseMetadata2 where

import de.jw.frege.sql.SqlType
import de.jw.frege.util.Format

data Test = public Test
data DatabaseReference = DatabaseReference  { databaseName :: String }
derive Eq DatabaseReference

newDatabaseReference :: String -> DatabaseReference;
public newDatabaseReference databaseName = DatabaseReference { databaseName };

getDatabaseNameFromReference :: DatabaseReference -> String;
public getDatabaseNameFromReference !ref = 
    case ref of DatabaseReference databaseName -> databaseName  

data TableReference = public TableReference { tableName :: String }
derive Eq TableReference
instance Show TableReference where show = getTableNameFromReference

newTableReference :: String -> TableReference;
public newTableReference tableName = TableReference tableName;

getTableNameFromReference :: TableReference -> String;
public getTableNameFromReference !ref = 
    case ref of TableReference tableName -> tableName;

data FieldDescription = public FieldDescription { 
        fieldName   :: String,
        dataType    :: SqlType, 
        nullable    :: Bool, 
        comment     :: String
}
derive Eq FieldDescription
instance Show FieldDescription where show = getFieldName

newFieldDescription :: String -> SqlType -> Bool -> FieldDescription;
public newFieldDescription fieldName dataType nullable =
    newFieldDescriptionWithComment fieldName dataType nullable "";
    
newFieldDescriptionWithComment :: String -> SqlType -> Bool -> String -> FieldDescription;
public newFieldDescriptionWithComment fieldName dataType nullable comment =
    FieldDescription fieldName dataType nullable comment;

getFieldName :: FieldDescription -> String;
public getFieldName !fd = case fd of FieldDescription fieldName _ _ _ -> fieldName;
    
getFieldDataType :: FieldDescription -> SqlType;
public getFieldDataType !fd = case fd of FieldDescription _ dataType _ _ -> dataType;

isFieldNullable :: FieldDescription -> Bool;
public isFieldNullable !fd = case fd of FieldDescription _ _ nullable _ -> nullable

getFieldComment :: FieldDescription -> String;
public getFieldComment !fieldDescription =  case fieldDescription of FieldDescription _ _ _ comment -> comment

data TableConstraint =
    public PrimaryKeyConstraint  { primaryKeyFieldNames :: [String] } |
    public UniqueConstraint      { uniqueFieldNames     :: [String] } | 
    public ForeignKeyConstraint  {
        foreignTableRef      :: TableReference,      --TODO: should this be primaryKeyTableRef?
        referencedFields     :: [(String, String)]   -- First name is column name in foreign key table, 2nd name is column in primary key table.
    }
derive Eq TableConstraint
instance Show TableConstraint where  show = showTableConstraint

isPrimaryKeyConstraint :: TableConstraint -> Bool
public isPrimaryKeyConstraint constraint =  case constraint of
    PrimaryKeyConstraint _ -> true
    _ -> false

isUniqueConstraint :: TableConstraint -> Bool
public isUniqueConstraint constraint = case constraint of
    UniqueConstraint _ -> true
    _ -> false

isForeignKeyConstraint :: TableConstraint -> Bool;
public isForeignKeyConstraint constraint = case constraint of
    ForeignKeyConstraint {} -> true;
    _ -> false

getPrimaryKeyFieldNames :: TableConstraint -> [String];
public getPrimaryKeyFieldNames constraint =  case constraint of
    PrimaryKeyConstraint primaryKeyFieldNames -> primaryKeyFieldNames
    _ -> error "The given constraint is not a PK constraint"

showTableConstraint :: TableConstraint -> String;
showTableConstraint !constraint = 
    case constraint of
    PrimaryKeyConstraint {primaryKeyFieldNames} -> 
        "Primary Key: " ++ joined ", " primaryKeyFieldNames;
    UniqueConstraint {uniqueFieldNames} -> 
        "Unique: " ++ joined ", " uniqueFieldNames;
    ForeignKeyConstraint {foreignTableRef, referencedFields} -> 
        "Foreign Key: foreignTable = " ++ show foreignTableRef ++ ": " 
            ++ joined ", " (map (\pr -> fst pr ++ " -> " ++ snd pr) referencedFields);


data TableDescription = public TableDescription { 
        tableRef    :: TableReference, 
        fields      :: [FieldDescription], 
        constraints :: [TableConstraint] 
    }
derive Eq TableDescription
instance Show TableDescription where  show = showTableDescription

newTableDescription :: TableReference -> [FieldDescription] -> [TableConstraint] -> TableDescription;
public newTableDescription tableRef fields constraints = TableDescription tableRef fields constraints

getTableReference :: TableDescription -> TableReference
public getTableReference !td = case td of TableDescription tableRef _ _ -> tableRef

getTableFields :: TableDescription -> [FieldDescription];
public getTableFields !td = case td of TableDescription _ fields _ -> fields

getTableConstraints :: TableDescription -> [TableConstraint];
public getTableConstraints !td = case td of TableDescription _ _ constraints -> constraints;

getTableName :: TableDescription -> String;
public getTableName td = getTableNameFromReference (getTableReference td)

getTableKeyFields :: TableDescription -> [FieldDescription];
public getTableKeyFields td = filter checkPrimaryKeyFn (getTableFields td) 
    where 
        -- Compute a list of PK columns in the table */
        pkFieldNames :: [String]
        pkFieldNames        =  concatMap getPrimaryKeyFieldNames (filter isPrimaryKeyConstraint (getTableConstraints td));
        -- Check to see a field is a primary key, as defined in the table constraint list */
        checkPrimaryKeyFn :: FieldDescription -> Bool
        checkPrimaryKeyFn fd= elem (getFieldName fd) pkFieldNames

private showTableDescription :: TableDescription -> String;
private showTableDescription !td = 
    let
        fieldDescHeadings :: [String];
        fieldDescHeadings = ["  NAME", "TYPE", "NULLABLE"];

        fieldDescItems :: FieldDescription -> [String];
        fieldDescItems !fieldDesc = 
            case fieldDesc of
            FieldDescription {fieldName, dataType, nullable} -> 
                ["  " ++ fieldName, show dataType, if nullable then "true" else "false"]
    in
        case td of
        TableDescription {tableRef, fields, constraints} -> 
            "Table: " ++ show tableRef
                ++ "\nFields:\n" ++ formatTable 2 (fieldDescHeadings : map fieldDescItems fields)
                ++ "Constraints:\n  "
                ++ joined "\n  " (map show constraints)
    