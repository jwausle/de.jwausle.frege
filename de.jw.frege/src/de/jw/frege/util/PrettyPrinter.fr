module de.jw.frege.util.PrettyPrinter where

import de.jw.frege.util.StringUtil

infixr 5 `:<|>`
infixr 6 `:<>`
infixr 6 `<>`


--class Document where 
--   (:<|>) :: Document  -> Document -> Document

data Document  =   
    NIL                                   |
    APPEND { doc1            :: Document, 
             doc2            :: Document} |
    NEST   { indent          :: Int,
             doc             :: Document} |
    TEXT   { strValue        :: String  } |
    LINE                                  | 
    UNION  { doc1            :: Document, 
             doc2            :: Document}
private plusplus doc doc = APPEND doc doc

private isEmptyDocument :: Document -> Bool
private isEmptyDocument doc = case doc of 
    NIL -> true
    _   -> false

private notEmptyDocument :: Document -> Bool
private notEmptyDocument = not • isEmptyDocument

private notEmptyDocuments :: [Document] -> [Document] 
private notEmptyDocuments = filter notEmptyDocument

--/*
--data InternalDoc = Nil
--         | String �Text� InternalDoc
--         | Int �Line� InternalDoc
--
data InternalDoc = 
    Nil  |
    Text {  strValue        :: String, 
         	doc             :: InternalDoc } | -- rest of doc
    Line {  indent          :: Int, 
            doc             :: InternalDoc }   

private emptyDoc :: Document;
private emptyDoc = NIL;
         
public nest :: Int -> Document -> Document;
public nest i x = NEST i x;

public text :: String -> Document;
public text s = TEXT s;

public line :: Document;
public line = LINE;

public group :: Document -> Document;
public group x = UNION (flatten x) x;

flatten :: Document -> Document;
flatten doc = 
    case doc of
    NIL -> NIL
    APPEND {doc1, doc2} -> APPEND (flatten doc1) (flatten doc2)
    NEST {indent, doc} -> NEST indent (flatten doc)
    TEXT {} -> doc
    LINE -> TEXT " "
    UNION {doc1} -> flatten doc1
    
layout :: InternalDoc -> String;
layout !doc = 
    let
        layoutHelper :: InternalDoc -> [String];
        layoutHelper doc = 
            case doc of
            Nil -> []
            Text {strValue, doc} -> strValue : layoutHelper doc
            Line {indent, doc} -> "\n" : space indent : layoutHelper doc
        docStrings = layoutHelper doc
    in
        concat docStrings


best :: Int -> Int -> Document -> InternalDoc;
best w k x = be w k [(0, x)];

be :: Int -> Int -> [(Int, Document)] -> InternalDoc;
be w k indentDocs = 
    case indentDocs of
    [] -> Nil
    indentDoc : z -> 
        case indentDoc of
        (i, doc) -> 
            case doc of
            NIL -> be w k z
            APPEND {doc1, doc2} -> be w k ((i, doc1) : (i , doc2) : z)
            NEST {indent, doc} -> be w k ((i + indent, doc) : z)
            TEXT {strValue} -> Text strValue (be w (k + String.length strValue) z)
            LINE -> Line i (be w i z)
            UNION {doc1, doc2} -> better w k (be w k ((i , doc1) : z))
                                             (be w k ((i , doc2) : z))
better :: Int -> Int -> InternalDoc -> InternalDoc -> InternalDoc
better !w !k x y = if fits (w - k) x then x else y

fits :: Int -> InternalDoc -> Bool;
fits !w doc = 
    if (w < 0) then False
    else
        case doc of
        Nil -> True
        Text {strValue, doc} -> fits (w - String.length strValue) doc
        Line {} -> True

--------------------------------------------------------------------------------
-- U T I L I T I T I E S
--------------------------------------------------------------------------------
public singleSpace :: Document
public singleSpace = text " "

-- x <+> y = x <> text " " <> y
public spaceSep :: Document -> Document -> Document
public spaceSep x y = (x `plusplus` singleSpace) `plusplus` y 

public lineSep :: Document -> Document -> Document;
public lineSep x y = (x `plusplus` line) `plusplus` y;

--pretty w x = layout (best w 0 x)
pretty :: Int -> Document -> String;
public pretty !maxWidth doc = layout (best maxWidth 0 doc);

private appendDocs :: Document -> Document -> Document;
private appendDocs x y = APPEND x y;

private concatDocs :: [Document] -> Document;
private concatDocs = folddoc appendDocs;

folddoc :: (Document -> Document -> Document) -> [Document] -> Document;
public folddoc f docs = 
    case docs of
    [] -> NIL
    d : ds -> 
        case ds of
        [] -> d
        _  -> f d (folddoc f ds)

--folddoc  :: (Document -> Document -> Document) -> [Document] -> Document;
--spaceSep :: Document -> Document -> Document
--filter   :: (a -> Bool) -> [a] -> [a]
--compose  :: [a -> a] -> a -> a
--not      :: Bool -> Bool
--null     :: [a]  -> Bool:=True
--not null :: Bool:=False
--docs     :: [Document]
public spread :: [Document] -> Document
public spread docs = folddoc spaceSep $ notEmptyDocuments docs 

public stack :: [Document] -> Document
public stack docs =  folddoc lineSep $ notEmptyDocuments docs

public bracket :: String -> Document -> String -> Document
public bracket l x r = group (((text l `plusplus` nest 2 (line `plusplus` x)) `plusplus` (line `plusplus` text r)))
--public bracket l x r = group (text l ++ nest 2 (line ++ x) ++ line ++ text r);

public spaceOrLineSep :: Document -> Document -> Document
public spaceOrLineSep x y = (x `plusplus` (UNION singleSpace line)) `plusplus` y
--public spaceOrLineSep x y = x ++ (UNION singleSpace line) ++ y;

public fillwords :: String -> Document;
public fillwords !str = folddoc spaceOrLineSep textWords
    where
        textWords = map text (words str)
    
public fill :: [Document] -> Document;
public fill docs = 
    case docs of
    [] -> NIL
    x : xs -> 
        case xs of
        [] -> x
        y : zs -> UNION (spaceSep (flatten x) (fill ((flatten y) : zs ))) (lineSep x (fill xs))

public fillSeparatedList :: Bool -> String -> [Document] -> Document;
public fillSeparatedList !trailingSeparator separator docs = fill $ separatedDocs docs
    where
        addTrailingSeparators documents = 
            case documents of
            [] -> []
            d : ds ->
                case ds of
                [] -> [d]
                _ -> (d `plusplus` text separator) : addTrailingSeparators ds
                  
        addLeadingSeparators documents = 
            case documents of
            [] -> []
            docsHead : docsTail -> docsHead : map (`plusplus` (text separator)) docsTail
          
        separatedDocs documents = if trailingSeparator 
                             then addTrailingSeparators $ notEmptyDocuments documents
                             else addLeadingSeparators $ notEmptyDocuments documents

public multilineText :: String -> Document;
public multilineText s = join2 line documentLines
    where
    	textLines :: [String];
        textLines = lines s;
        
        documentLines :: [Document];
        documentLines = map text textLines;
        

private join2 :: Document -> [Document] -> Document
private join2 separator elements = fold  plusplus emptyDoc docs 
    where
        docs :: [Document];
        docs = intersperse separator elements;

private intersperse :: Document -> [Document] -> [Document]
private intersperse separator !list =
    case list of
    [] -> []
    listHead : listTail ->
        if null listTail then
            listHead : []
        else
            listHead : separator : intersperse separator listTail
